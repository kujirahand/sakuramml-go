// Code generated by goyacc parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package sakuramml

import __yyfmt__ "fmt"

//line parser.go.y:2

//line parser.go.y:5
type yySymType struct {
	yys   int
	node  *Node
	token Token
	str   string
}

const LF = 57346
const WORD = 57347
const NUMBER = 57348
const TIME = 57349
const TIME_SIG = 57350
const COMMENT = 57351
const INT = 57352
const STR = 57353
const MMLSTR = 57354
const PRINT = 57355
const PAREN_L = 57356
const PAREN_R = 57357
const SUB = 57358
const DIV = 57359

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LF",
	"WORD",
	"NUMBER",
	"TIME",
	"TIME_SIG",
	"COMMENT",
	"INT",
	"STR",
	"MMLSTR",
	"PRINT",
	"PAREN_L",
	"PAREN_R",
	"SUB",
	"DIV",
	"'c'",
	"'d'",
	"'e'",
	"'f'",
	"'g'",
	"'a'",
	"'b'",
	"'#'",
	"'+'",
	"'-'",
	"'*'",
	"'r'",
	"'['",
	"']'",
	"':'",
	"'l'",
	"'v'",
	"'q'",
	"'o'",
	"'t'",
	"','",
	"'('",
	"')'",
	"'n'",
	"'@'",
	"'>'",
	"'<'",
	"'`'",
	"'\"'",
	"'y'",
	"'='",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:93

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 134

var yyAct = [...]int8{
	39, 60, 57, 51, 74, 73, 53, 99, 107, 98,
	50, 56, 52, 43, 44, 45, 46, 47, 48, 49,
	84, 106, 83, 90, 97, 87, 58, 64, 65, 82,
	79, 67, 66, 101, 100, 86, 85, 41, 40, 55,
	54, 59, 41, 40, 42, 3, 25, 5, 38, 42,
	68, 69, 70, 71, 72, 4, 2, 75, 76, 1,
	77, 78, 61, 62, 63, 0, 0, 80, 81, 0,
	0, 0, 0, 0, 88, 89, 0, 0, 0, 0,
	91, 0, 0, 92, 0, 93, 94, 95, 96, 0,
	6, 18, 0, 19, 20, 21, 22, 23, 102, 24,
	103, 104, 105, 0, 30, 31, 32, 33, 34, 35,
	36, 0, 0, 0, 0, 37, 27, 28, 29, 11,
	12, 14, 13, 15, 0, 0, 0, 26, 16, 7,
	8, 9, 10, 17,
}

var yyPact = [...]int16{
	86, -1000, 86, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 32, 32, 32, 32, 32, 32, 32, -29, -36,
	-42, -1000, 35, 34, -37, 37, 32, 32, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -6, -7, 32,
	32, 32, 32, 32, -43, -44, 32, 32, -1000, 37,
	-1000, -1000, -1000, -1000, -8, -1000, 32, 32, -9, -18,
	4, 3, -13, 32, 32, -1000, -17, -1000, -1000, 32,
	-1000, -1000, 32, -1000, 32, 32, 32, 32, -1000, -1000,
	-1000, -1000, -14, -31, 2, 1, -1000, 32, -1000, 32,
	32, 32, -1000, -19, -32, -1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 59, 56, 45, 55, 47, 0, 46, 1, 41,
}

var yyR1 = [...]int8{
	0, 1, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 6, 6, 6, 5, 5, 5,
	5, 4, 4, 4, 4, 4, 4, 7, 7, 7,
	7, 7, 7, 7, 7, 9, 9, 8, 8, 8,
}

var yyR2 = [...]int8{
	0, 1, 0, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 4, 4,
	3, 5, 7, 4, 6, 8, 8, 7, 5, 1,
	4, 4, 3, 4, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 2, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -5, 4, 43, 44, 45,
	46, 33, 34, 36, 35, 37, 42, 47, 5, 7,
	8, 9, 10, 11, 13, -7, 41, 30, 31, 32,
	18, 19, 20, 21, 22, 23, 24, 29, -3, -6,
	6, 5, 12, -6, -6, -6, -6, -6, -6, 48,
	39, 39, 48, 48, 5, 5, 48, 39, -6, -9,
	-8, 25, 26, 27, -6, -6, 38, 38, -6, -6,
	-6, -6, -6, 48, 48, -6, -6, -6, -8, 38,
	-6, -6, 38, 40, 38, 32, 32, 38, -6, -6,
	40, -6, -6, -6, -6, -6, -6, 38, 40, 38,
	32, 32, -6, -6, -6, -6, 40, 40,
}

var yyDef = [...]int8{
	2, -2, 1, 3, 5, 6, 7, 8, 9, 10,
	11, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 29, 0, 0, 0, 44, 0, 38, 39, 40,
	47, 48, 49, 50, 51, 52, 53, 54, 4, 12,
	34, 35, 36, 13, 14, 15, 16, 17, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 43,
	55, 57, 58, 59, 45, 37, 0, 0, 20, 0,
	0, 0, 0, 0, 0, 32, 0, 42, 56, 0,
	18, 19, 0, 23, 0, 0, 0, 0, 30, 31,
	33, 46, 21, 0, 0, 0, 28, 0, 24, 0,
	0, 0, 22, 0, 0, 27, 25, 26,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 46, 25, 3, 3, 3, 3,
	39, 40, 28, 26, 38, 27, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 32, 3,
	44, 48, 43, 3, 42, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 30, 3, 31, 3, 3, 45, 23, 24, 18,
	19, 20, 21, 22, 3, 3, 3, 3, 33, 3,
	41, 36, 3, 35, 29, 3, 37, 3, 34, 3,
	3, 47,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:25
		{
			yyVAL.node = yyDollar[1].node
			yylex.(*Lexer).result = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:28
		{
			yyVAL.node = NewNode(Nop)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:29
		{
			yyVAL.node = NewNode(NodeList)
			yyVAL.node = AppendChildNode(yyVAL.node, yyDollar[1].node)
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:30
		{
			yyVAL.node = AppendChildNode(yyDollar[1].node, yyDollar[2].node)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:35
		{
			yyVAL.node = NewNode(NodeEOL)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:36
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, ">", nil)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:37
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "<", nil)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:38
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "`", nil)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:39
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "\"", nil)
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:40
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "l", yyDollar[2].node)
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:41
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "v", yyDollar[2].node)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:42
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "o", yyDollar[2].node)
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:43
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "q", yyDollar[2].node)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:44
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "t", yyDollar[2].node)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:45
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "@", yyDollar[2].node)
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:46
		{
			yyVAL.node = NewCommandNode2(yyDollar[1].token, "@", yyDollar[2].node, yyDollar[4].node)
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:47
		{
			yyVAL.node = NewCommandNode2(yyDollar[1].token, "y", yyDollar[2].node, yyDollar[4].node)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:48
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "WORD", yyDollar[3].node)
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:49
		{
			yyVAL.node = NewCommandNode2(yyDollar[1].token, "WORD", yyDollar[3].node, yyDollar[5].node)
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:50
		{
			yyVAL.node = NewCommandNode3(yyDollar[1].token, "WORD", yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:51
		{
			yyVAL.node = NewCommandNode(yyDollar[1].token, "WORD", yyDollar[3].node)
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:52
		{
			yyVAL.node = NewCommandNode2(yyDollar[1].token, "WORD", yyDollar[3].node, yyDollar[5].node)
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:53
		{
			yyVAL.node = NewCommandNode3(yyDollar[1].token, "WORD", yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 26:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:54
		{
			yyVAL.node = NewTimeNode(yyDollar[1].token, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:55
		{
			yyVAL.node = NewTimeNode(yyDollar[1].token, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:56
		{
			yyVAL.node = NewTimeSigNode(yyDollar[1].token, yyDollar[3].node, yyDollar[5].node)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:57
		{
			yyVAL.node = NewCommentNode(yyDollar[1].token)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:58
		{
			yyVAL.node = NewLetNode(yyDollar[1].token, yyDollar[2].token, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:59
		{
			yyVAL.node = NewLetNode(yyDollar[1].token, yyDollar[2].token, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:60
		{
			yyVAL.node = NewPrintNode(yyDollar[3].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:61
		{
			yyVAL.node = NewPrintNode(yyDollar[3].node)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:64
		{
			yyVAL.node = NewNumberNode(yyDollar[1].token)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:65
		{
			yyVAL.node = NewGetVarNode(yyDollar[1].token)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:66
		{
			yyVAL.node = NewStrNode(yyDollar[1].token)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:69
		{
			yyVAL.node = NewLoopNodeBegin(yyDollar[1].token, yyDollar[2].node)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:70
		{
			yyVAL.node = NewLoopNodeBegin(yyDollar[1].token, nil)
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:71
		{
			yyVAL.node = NewLoopNodeEnd(yyDollar[1].token)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:72
		{
			yyVAL.node = NewLoopNodeBreak(yyDollar[1].token)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:75
		{
			yyVAL.node = NewToneNode(yyDollar[1].token, "", yyDollar[2].node, nil)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:76
		{
			yyVAL.node = NewToneNode(yyDollar[1].token, yyDollar[2].str, yyDollar[3].node, nil)
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:77
		{
			yyVAL.node = NewToneNode(yyDollar[1].token, yyDollar[2].str, nil, nil)
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:78
		{
			yyVAL.node = NewToneNode(yyDollar[1].token, "", nil, nil)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:79
		{
			yyVAL.node = NewToneNode(yyDollar[1].token, "", nil, yyDollar[2].node)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:80
		{
			yyVAL.node = NewToneNode(yyDollar[1].token, "", yyDollar[4].node, yyDollar[2].node)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.str = yyDollar[1].token.label
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.str = yyDollar[1].str + yyDollar[2].token.label
		}
	}
	goto yystack /* stack new state and value */
}
